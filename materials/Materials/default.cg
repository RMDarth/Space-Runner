struct VIn
{
    float4 p    : POSITION;
    float3 n    : NORMAL;
    float3 t    : TANGENT;
	float3 b 	: BINORMAL;
    float2 uv   : TEXCOORD0;
};
 
struct VOut
{
    float4 p    : POSITION;
 
    float2 uv   : TEXCOORD0;
    float4 wp   : TEXCOORD1;
    float3 n    : TEXCOORD2;
    float3 t    : TEXCOORD3;
    float3 b    : TEXCOORD4;
};
 
struct PIn
{
    float2 uv   : TEXCOORD0;
    float4 wp   : TEXCOORD1;
    float3 n    : TEXCOORD2;
    float3 t    : TEXCOORD3;
    float3 b    : TEXCOORD4;
};

VOut default_vs(VIn IN,
    uniform float4x4 wMat,
    uniform float4x4 wvpMat)
{
    VOut OUT;
    OUT.wp = mul(wMat, IN.p);
    OUT.p = mul(wvpMat, IN.p);
 
    OUT.uv = IN.uv;
 
    OUT.n = IN.n;
    OUT.t = IN.t;
    OUT.b = IN.b;
 
    return OUT;
}
 
float4 default_ps(
    PIn IN,
    uniform float3 lightDif0,
    uniform float4 lightPos0,
    uniform float3 lightSpec0,
    uniform float4 matDif,
    uniform float4 matSpec,
    uniform float matShininess,
    uniform float3 camPos,
    uniform sampler2D diffuseMap : TEXUNIT0): COLOR0
{
    // direction
    float3 ld0 = normalize(lightPos0.xyz - lightPos0.w * IN.wp.xyz );
 
    float3 diffuse = max(dot(ld0, -IN.n), 0);
 
    float3 camDir = normalize(camPos - IN.wp.xyz);
    float3 halfVec = normalize(ld0 + camDir);
    float3 specular = pow(max(dot(IN.n, halfVec), 0), matShininess);
 
    float4 diffuseTex = tex2D(diffuseMap, IN.uv);
 
    float3 diffuseContrib = (diffuse * lightDif0 * diffuseTex.rgb * matDif.rgb);
    float3 specularContrib = (specular * lightSpec0 * matSpec.rgb);
    float3 light0C = (diffuseContrib + specularContrib);
 
    return diffuseTex * 0.1 + float4(light0C, diffuseTex.a);
}